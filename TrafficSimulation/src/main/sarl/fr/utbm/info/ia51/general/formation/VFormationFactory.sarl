/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.general.formation

import fr.utbm.info.ia51.framework.math.Vector2f

/** Factory of formation with a V pattern.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class VFormationFactory implements FormationFactory {

	/** Space between anchor centers.
	 */
	public val distance : float

	new (distanceBetweenAnchors : float = 10f, sizeOfAnchor : float = 50f) {
		this.distance = Math::max(distanceBetweenAnchors, 0f) + Math::max(sizeOfAnchor, 0f)
	}

	def build(nbAnchors : int) : FormationPattern {
		var pattern = new FormationPattern

		var leader = new FormationAnchor(pattern)
		pattern.addAnchor(leader)
		
		val topBranch = new Vector2f(-1, -1)
		topBranch.length = this.distance
		val bottomBranch = new Vector2f(-1, 1)
		bottomBranch.length = this.distance
		
		if (nbAnchors > 1) {
			var branch : Vector2f
			var top = true
			for (i : 1..<nbAnchors) {
				if (top) {
					branch = topBranch
				} else {
					branch = bottomBranch
				}
				var parent = if (i > 1) pattern.getAnchorAt(i - 2) else leader
				var anchor = new FormationAnchor(branch.x, branch.y, 0, parent, i);
				pattern.addAnchor(anchor)
				top = !top
			}
		}

		return pattern
	}

}
