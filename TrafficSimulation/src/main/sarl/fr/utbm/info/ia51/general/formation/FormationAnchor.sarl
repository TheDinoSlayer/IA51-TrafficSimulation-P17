/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.general.formation

import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Vector2f
import java.lang.ref.WeakReference

/**
 * An anchor in a formation body.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class FormationAnchor {

	val spotIndex : int
	val relativePosition : Vector2f 
	val relativeOrientation : float 
	val parent : FormationAnchor
	val formationParent : WeakReference<FormationPattern>

	var bufferGlobalPosition : Point2f
	var bufferGlobalOrientation : Vector2f
	
	/**
	 * @param dx is the relative vector from the parent anchor to this anchor.
	 * @param dy is the relative vector from the parent anchor to this anchor.
	 * @param rotation is the relative rotation from the parent anchor. 
	 * @param parent is the parent anchor.
	 * @param spotIndex is the index of the anchor in the formation body.
	 */
	new (dx : float, dy : float, rotation : float, parent : FormationAnchor, spotIndex : int) {
		this.spotIndex = spotIndex
		this.relativePosition = new Vector2f(dx, dy)
		this.relativeOrientation = rotation
		this.parent = parent
		this.formationParent = new WeakReference(parent.pattern)
	}

	/** 
	 * @param dx is the relative vector from the parent anchor to this anchor.
	 * @param dy is the relative vector from the parent anchor to this anchor.
	 * @param rotation is the relative rotation from the parent anchor. 
	 * @param parent the formation pattern
	 */
	new (dx : float, dy : float, rotation : float, parent : FormationPattern) {
		this.spotIndex = 0
		this.relativePosition = new Vector2f(dx, dy)
		this.relativeOrientation = rotation
		this.parent = null
		this.formationParent = new WeakReference(parent)
	}

	/** 
	 * @param parent the formation pattern
	 */
	new (parent : FormationPattern) {
		this.spotIndex = 0
		this.relativePosition = new Vector2f
		this.relativeOrientation = 0
		this.parent = null
		this.formationParent = new WeakReference(parent)
	}
	
	override toString : String {
		"Anchor " + this.spotIndex
	}

	/** Clear the buffers */	
	package def clear {
		this.bufferGlobalPosition = null
		this.bufferGlobalOrientation = null
	}

	/** Replies the global position of this anchor.
	 * 
	 * @return the global position of this anchor.
	 */
	def getGlobalPosition : Point2f {
		if (this.bufferGlobalPosition === null) {
			var current = this
			var toRoot = new Vector2f
			while (current !== null) {
				toRoot += current.relativePosition
				current = current.parent
			}
			var pattern = getPattern
			toRoot.turn(pattern.globalAngle)
			this.bufferGlobalPosition = toRoot + pattern.globalPosition
		}
		return this.bufferGlobalPosition
	}

	/** Replies the global orientation which may be targeted by an entity
	 * on this anchor.
	 * 
	 * @return the global orientation targeted by the entity on the anchor.
	 */
	def getGlobalOrientation : Vector2f {
		if (this.bufferGlobalOrientation === null) {
			var current = this
			var orientation = 0f
			while (current !== null) {
				orientation += current.relativeOrientation
				current = current.parent
			}
			var v = getPattern.globalOrientation
			v.turn(orientation)
			this.bufferGlobalOrientation = v
		}
		return this.bufferGlobalOrientation
	}

	/** Replies the relative position from the parent anchor to this anchor.
	 * 
	 * @return the relative position.
	 */
	def getRelativePosition : Vector2f {
		this.relativePosition.clone
	}
	
	/** Replies the relative orientation from the parent anchor to this anchor.
	 * 
	 * @return the relative orientation
	 */
	def getRelativeOrientation : float {
		this.relativeOrientation
	}

	/** Replies the parent anchor.
	 *
	 * @return the parent anchor, or <code>null</code> if none.
	 */
	def getParent : FormationAnchor {
		this.parent
	}

	/** Replies the formation pattern.
	 * 
	 * @return the pattern, never <code>null</code>.
	 */
	def getPattern : FormationPattern {
		this.formationParent.get
	}

	/** Replies the index of this anchor in the formation body.
	 * 
	 * @return the index of this anchor in the formation body.
	 */
	def getSpotIndex : int {
		this.spotIndex
	}

}